import numpy as np

#перцептрон
# Данные для изучения
texts = ["Строительство школы требует возведения множества классных комнат, аудиторий и спортивных площадок","Это новое здание", "Строительство моста началось", "Строительство торгового центра", "Конструкция деревянного стола требует точного измерения и соединения досок","Постройка гаража требует возведения стен, установки ворот и устройства пола.","Устройство бассейна включает в себя выкопку ямы, установку бетонных стен и устройство системы фильтрации","Строительство крыши требует установки стропил и крепления кровельных материалов","Монтаж системы отопления включает в себя подключение радиаторов и укладку труб","На строительство туннеля требуется бурение и закладка кирпичей или использование бетонных сегментов.","Установка солнечных панелей включает в себя закрепление и подключение к электросети","Построение моста требует возведения опор и укладки дорожного покрытия","Установка сантехники включает в себя подключение труб и крепление смесителей","Для постройки камина необходимо уложить огнеупорные кирпичи и подключить дымоход","Монтаж окна включает в себя установку рамы, стекла и герметизацию","На установку потолочного освещения требуется подключить провода и закрепить светильники","Для постройки забора нужно закрепить столбы и натянуть проволоку между ними","Сборка мебели включает в себя скручивание болтов и использование отвертки.","При возведении стены используются кирпичи, блоки или гипсокартонные панели","Строительство дома начинается с выкопки фундамента"]
labels = ["школа","здание", "мост", "торговый центр","стол","гараж","бассейн","крыша","отопление","туннель","солнечные панели","мост","сантехника","камин","окно","освещение","Забор","Мебель","Стена","дом"]

# Создание словаря
word_dict = {}
for text in texts:
    words = text.split()
    for word in words:
        if word not in word_dict:
            word_dict[word] = len(word_dict)

# Создание массива признаков (для каждого слова в world_dict)
features = np.zeros((len(texts), len(word_dict)), dtype=int)
for i, text in enumerate(texts):
    words = text.split()
    for word in words:
        features[i, word_dict[word]] = 1

labels_dict = {label: i for i, label in enumerate(labels)}
targets = np.array([labels_dict[label] for label in labels])

# Обучение
weights = np.zeros((len(labels), len(word_dict)), dtype=int)
learning_rate = 0.1

weights = weights.astype(np.float64)

for _ in range(100):
    for i in range(len(features)):
        prediction = np.argmax(np.dot(weights, features[i]))
        if prediction != targets[i]:
            weights[prediction] -= learning_rate * features[i]
            weights[targets[i]] += learning_rate * features[i]

# тест
test_text = "Реконструкция старой школы"
test_features = np.zeros((1, len(word_dict)), dtype=int)
words = test_text.split()
for word in words:
    if word in word_dict:
        test_features[0, word_dict[word]] = 1

predicted_label = np.argmax(np.dot(weights, test_features.T))
predicted_object = labels[predicted_label]

print("Наименование объекта капитального строительства:", predicted_object)
